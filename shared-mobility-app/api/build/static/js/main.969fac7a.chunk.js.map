{"version":3,"sources":["components/upload_icon.png","components/Upload.js","components/DataVisualization.js","App.js","reportWebVitals.js","index.js"],"names":["Upload","props","state","error","errorMsg","redirect","loading","askForInput","probValue","distanceValue","startTime","endTime","handleUploadData","bind","checkFiles","ev","preventDefault","this","uploadDemand","files","uploadEvents","uploadLocations","console","log","setState","data","FormData","append","name","fetch","method","body","then","response","json","msg","to","className","src","logo","alt","Form","onSubmit","Group","Row","Label","id","column","Col","File","onChange","ref","type","Button","variant","Modal","show","onHide","size","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","onClick","enforceFocus","scrollable","xs","onApply","picker","startDate","format","initialSettings","singleDatePicker","showDropdowns","minYear","maxYear","parseInt","Date","getFullYear","as","value","e","target","min","max","Control","Math","ceil","tooltipLabel","currentValue","renderRedirect","Component","DataVisualization","center","demandFilename","rectangles","start","end","mapsToDisplay","mapTitles","mapTooltipTitles","mapInfoText","res","reader","getReader","ReadableStream","controller","pump","read","done","close","enqueue","stream","Response","blob","URL","createObjectURL","url","now","fullDate","getMonth","getDate","toString","link","document","createElement","href","style","download","appendChild","click","removeChild","catch","err","getRectangleData","startString","endString","event","varName","isChecked","checked","includes","push","filter","item","RectangleList","map","i","Rectangle","bounds","color","Tooltip","sticky","lat","lng","Maps","varNames","OverlayTrigger","trigger","placement","overlay","Popover","Content","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","LayersControl","position","Overlay","LayerGroup","checkBoxPopover","Container","fluid","onCallback","setTime","endDate","Check","label","handleMapCheckbox","downloadData","length","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.969fac7a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/upload_icon.1b97cf91.png\";","import logo from './upload_icon.png';\r\nimport React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\r\nimport './Upload.css';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Default } from 'react-awesome-spinners'\r\n\r\nclass Upload extends Component {\r\n  // create state variable and handleUploadData function\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n      errorMsg: '',\r\n      redirect: false,\r\n      loading: false,\r\n      askForInput: false,\r\n      probValue: 100,\r\n      distanceValue: 400,\r\n      startTime: null,\r\n      endTime: null,\r\n    };\r\n    this.handleUploadData = this.handleUploadData.bind(this);\r\n    this.checkFiles = this.checkFiles.bind(this);\r\n  }\r\n\r\n  handleUploadData(ev) {\r\n    // prevents the default action that belongs to the event from happening\r\n    // we have this because we don't actually want to submit the form\r\n    ev.preventDefault();\r\n    // make sure there are no missing files\r\n    if (this.uploadDemand.files[0] == null && (this.uploadEvents.files[0] == null || this.uploadLocations.files[0] == null)) {\r\n      console.log('Missing at least one data file')\r\n      this.setState({error: true, errorMsg: \"Missing at least one file, please make sure to upload both events and locations data!\"});\r\n      return;\r\n    } else if (this.uploadDemand.files[0] != null) {\r\n      console.log('Received demand file')\r\n      // set loading variable to be true\r\n      this.setState({loading: true});\r\n      // create a set of key/value pairs to send to the backend\r\n      const data = new FormData();\r\n      data.append('demandFile', this.uploadDemand.files[0]);\r\n      data.append('demandFilename', this.uploadDemand.files[0].name);\r\n      // send the uploaded data to flask\r\n      fetch('/upload', { method: 'POST', body: data }).then(response => response.json()).then(response => {\r\n        console.log(response);\r\n        this.setState({error: response.error, errorMsg: response.msg});\r\n        if (!this.state.error && this.state.errorMsg !== '') {\r\n          this.setState({redirect: true});\r\n        }\r\n        this.setState({loading: false});\r\n      });\r\n    } else {\r\n      // set loading variable to be true\r\n      this.setState({loading: true});\r\n      // create a set of key/value pairs to send to the backend\r\n      const data = new FormData();\r\n      data.append('eventsFile', this.uploadEvents.files[0]);\r\n      data.append('eventsFilename', this.uploadEvents.files[0].name);\r\n      data.append('locationsFile', this.uploadLocations.files[0]);\r\n      data.append('locationsFilename', this.uploadLocations.files[0].name);\r\n      data.append('probValue', this.state.probValue);\r\n      data.append('distanceValue', this.state.distanceValue);\r\n      // add start and end times if applicable\r\n      if (this.state.startTime != null) {\r\n        data.append('startTime', this.state.startTime);\r\n      } else {\r\n        data.append('startTime', '');\r\n      }\r\n      if (this.state.endTime != null) {\r\n        data.append('endTime', this.state.endTime);\r\n      } else {\r\n        data.append('endTime', '');\r\n      }\r\n      // send the uploaded data to flask\r\n      fetch('/upload', { method: 'POST', body: data }).then(response => response.json()).then(response => {\r\n        console.log(response);\r\n        this.setState({error: response.error, errorMsg: response.msg});\r\n        if (!this.state.error && this.state.errorMsg !== '') {\r\n          this.setState({redirect: true});\r\n        }\r\n        this.setState({loading: false});\r\n      });\r\n    }\r\n  }\r\n\r\n  renderRedirect() {\r\n    if (this.state.redirect) {\r\n      return (\r\n        <>\r\n          <Redirect to=\"/data\" />\r\n        </>\r\n      );\r\n    }\r\n  }\r\n\r\n  checkFiles() {\r\n    if (this.uploadEvents.files[0] != null && this.uploadLocations.files[0] != null) {\r\n      this.setState({askForInput: true});\r\n    }\r\n    // this.setState({askForInput: true});\r\n  }\r\n\r\n  render() {\r\n    const loading = this.state.loading;\r\n    return (\r\n      <>\r\n        <div>\r\n          {loading\r\n            ? <div>\r\n                <header className=\"App-header\">\r\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                  <p>Processing Data</p>\r\n                </header>\r\n                <Default />\r\n              </div>\r\n            : <div>\r\n                <header className=\"App-header\">\r\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                  <p>Upload Data</p>\r\n                </header>\r\n                <Form onSubmit={this.handleUploadData} className=\"Upload\">\r\n                  <Form.Group>\r\n                    <p className=\"formText\">Input Remix events and locations data</p>\r\n                    <Form.Row>\r\n                      <Form.Label id=\"inputTitle\" column>Events Data</Form.Label>\r\n                      <Col>\r\n                        <Form.File className=\"fileInput\" onChange={this.checkFiles}\r\n                          ref={(ref) => { this.uploadEvents = ref; }}\r\n                          type=\"file\"\r\n                        />\r\n                      </Col>\r\n                    </Form.Row>\r\n                    <br />\r\n                    <Form.Row id=\"userInput2\">\r\n                      <Form.Label id=\"inputTitle\" column>Locations Data</Form.Label>\r\n                      <Col>\r\n                        <Form.File className=\"fileInput\" onChange={this.checkFiles}\r\n                          ref={(ref) => { this.uploadLocations = ref; }}\r\n                          type=\"file\"\r\n                        />\r\n                      </Col>\r\n                    </Form.Row>\r\n                    <br />\r\n                    <p className=\"formText\">Or input estimated demand data from last time</p>\r\n                    <Form.Row id=\"userInput3\">\r\n                      <Form.Label id=\"inputTitle\" column>Demand Data</Form.Label>\r\n                      <Col>\r\n                        <Form.File className=\"fileInput\" onChange={this.checkFiles}\r\n                          ref={(ref) => { this.uploadDemand = ref; }}\r\n                          type=\"file\"\r\n                        />\r\n                      </Col>\r\n                    </Form.Row>\r\n                  </Form.Group>\r\n                  <Button variant=\"outline-light\" type=\"submit\" id=\"submitButton\"> Upload </Button>\r\n              </Form>\r\n            </div>\r\n          }\r\n        </div>\r\n\r\n        <Modal\r\n          show={this.state.error}\r\n          onHide={() => this.setState({error:false, errorMsg: ''})}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              File Upload Error\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p>\r\n              { this.state.errorMsg }\r\n            </p>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button onClick={() => this.setState({error: false, errorMsg: ''})}>Close</Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Modal\r\n          show={this.state.askForInput}\r\n          onHide={() => this.setState({askForInput:false})}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n          enforceFocus={false}\r\n          scrollable={true}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              Input Model Parameters\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p>\r\n              <b>Disclaimer</b>: unless specified, the first and last times in the events\r\n              data are taken as the start and end times for data processing\r\n            </p>\r\n            <Row id=\"dateQuestions\">\r\n              <Col xs=\"6\">\r\n                <div>\r\n                  <p>\r\n                    Start date (optional)\r\n                  </p>\r\n                  <DateRangePicker\r\n                    onApply = {(ev, picker) => {\r\n                      this.setState({startTime: picker.startDate.format('M/D/YYYY')});\r\n                      console.log(picker.startDate.format('M/D/YYYY'));\r\n                    }}\r\n                    initialSettings={{\r\n                      singleDatePicker: true,\r\n                      showDropdowns: true,\r\n                      minYear: 2005,\r\n                      maxYear: parseInt(new Date().getFullYear(), 10),\r\n                    }}\r\n                  >\r\n                    <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                      click to set date\r\n                    </button>\r\n                    {/*<input type=\"text\" className=\"form-control dateInput\" />*/}\r\n                  </DateRangePicker>\r\n                </div>\r\n              </Col>\r\n              <Col xs=\"6\">\r\n                <div>\r\n                  <p>\r\n                    End date (optional)\r\n                  </p>\r\n                  <DateRangePicker\r\n                    onApply = {(ev, picker) => {\r\n                      this.setState({endTime: picker.startDate.format('M/D/YYYY')});\r\n                      console.log(picker.startDate.format('M/D/YYYY'));\r\n                    }}\r\n                    initialSettings={{\r\n                      singleDatePicker: true,\r\n                      showDropdowns: true,\r\n                      minYear: 2005,\r\n                      maxYear: parseInt(new Date().getFullYear(), 10),\r\n                    }}\r\n                  >\r\n                    <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                      click to set date\r\n                    </button>\r\n                    {/*<input type=\"text\" className=\"form-control dateInput\" />*/}\r\n                  </DateRangePicker>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <br />\r\n            <Form>\r\n              <Form.Label>Dimensions for one grid (in meters)</Form.Label>\r\n              <Form.Group as={Row}>\r\n                <Col xs=\"9\">\r\n                  <RangeSlider\r\n                    value={this.state.distanceValue}\r\n                    onChange={e => this.setState({distanceValue: e.target.value, probValue: 100})}\r\n                    min={100}\r\n                    max={1000}\r\n                  />\r\n                </Col>\r\n                <Col xs=\"3\">\r\n                  <Form.Control\r\n                    value={this.state.distanceValue}\r\n                    onChange={e => this.setState({distanceValue: e.target.value, probValue: 100})}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n            </Form>\r\n            <Form>\r\n              <Form.Label>Probability (%) a user wouldn't consider a scooter that is at least one grid away </Form.Label>\r\n              <Form.Group as={Row}>\r\n                <Col xs=\"9\">\r\n                  <RangeSlider\r\n                    value={this.state.probValue}\r\n                    onChange={e => this.setState({probValue: e.target.value})}\r\n                    min={Math.ceil((this.state.distanceValue/10)+5)}\r\n                    max={100}\r\n                    tooltipLabel={currentValue => `${currentValue}%`}\r\n                  />\r\n                </Col>\r\n                <Col xs=\"3\">\r\n                  <Form.Control\r\n                    value={this.state.probValue}\r\n                    onChange={e => this.setState({probValue: e.target.value})}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button onClick={() => this.setState({askForInput:false})}>Submit</Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <div>\r\n          {this.renderRedirect()}\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;\r\n","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\r\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\r\nimport './DataVisualization.css';\r\nimport { MapContainer, TileLayer, Rectangle, Tooltip, LayersControl, LayerGroup } from 'react-leaflet'\r\n\r\nclass DataVisualization extends Component {\r\n  // create state variable\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        center: [41.82972307181493, -71.41681396120897],\r\n        demandFilename: \"processedGridCellData.csv\",\r\n        rectangles: [],\r\n        start: null,\r\n        end: null,\r\n        mapsToDisplay: [],\r\n        mapTitles: {\"avail_count\":\"Average number of scooters\", \"avail_mins\":\"Minutes at least one scooter available\",\r\n          \"prob_scooter_avail\":\"Probability scooter available\", \"trips\":\"Number of trips\", \"adj_trips\":\"Adjusted number of trips\",\r\n          \"unmet_demand\":\"Unmet demand\"},\r\n        mapTooltipTitles: {\"avail_count\":\"# Scooters\", \"avail_mins\":\"Minutes Available\",\r\n          \"prob_scooter_avail\":\"Prob Available\", \"trips\":\"# Trips\", \"adj_trips\":\"Adjusted # Trips\",\r\n          \"unmet_demand\":\"Unmet Demand\", \"estimated_demand\":\"Estimated Demand\"},\r\n        mapInfoText: {\"avail_count\":\"Average number of scooters in a day\",\r\n          \"avail_mins\":\"Average minutes at least one scooter available in a day\",\r\n          \"prob_scooter_avail\":\"Average probability a random user finds a scooter available that they are willing to travel to\",\r\n          \"trips\":\"Average number of trips in a day (obtained from events data)\",\r\n          \"adj_trips\":\"Average estimated number of trips originating from a grid cell within a day\",\r\n          \"unmet_demand\":\"Estimated unmet demand within a day for grid cells with probabilities that significantly differ from 0. Value obtained by first calculating estimated demand (adjusted trips divided by probability scooter available) and then subtracting adjusted trips from it\"},\r\n    };\r\n  }\r\n\r\ndownloadData() {\r\n    fetch('/return-demand-file').then(res => res).then(data => {\r\n      var reader = data.body.getReader();\r\n      return new ReadableStream({\r\n        start(controller) {\r\n          return pump();\r\n          function pump() {\r\n            return reader.read().then(({ done, value }) => {\r\n              // When no more data needs to be consumed, close the stream\r\n              if (done) {\r\n                  console.log(\"Stream complete\");\r\n                  controller.close();\r\n                  return;\r\n              }\r\n              // Enqueue the next data chunk into our target stream\r\n              controller.enqueue(value);\r\n              return pump();\r\n            });\r\n          }\r\n        }\r\n      })\r\n    })\r\n    .then(stream => new Response(stream))\r\n    .then(response => response.blob())\r\n    .then(blob => URL.createObjectURL(blob))\r\n    .then(url => {\r\n      // console.log(url);\r\n      // console.log(this.state.demandFilename);\r\n      // get the timestamp to add to the filename\r\n      var now = new Date();\r\n      var year = now.getFullYear() * 10000;\r\n      var month = (now.getMonth() + 1) * 100;\r\n      var date = now.getDate();\r\n      var fullDate = (year + month + date).toString();\r\n      var link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.style = \"visibility:hidden\";\r\n      link.download = fullDate + \"_\" + this.state.demandFilename;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    })\r\n    .catch(err => console.error(err));\r\n  }\r\n\r\n  getRectangleData(method) {\r\n    if (this.state.start == null || this.state.end == null) {\r\n      // in beginning just get rectangles and the initial start and end\r\n      fetch('/return-rectangles', { method: 'GET' }).then(res => res).then(data => {\r\n        var reader = data.body.getReader();\r\n        return new ReadableStream({\r\n          start(controller) {\r\n            return pump();\r\n            function pump() {\r\n              return reader.read().then(({ done, value }) => {\r\n                // When no more data needs to be consumed, close the stream\r\n                if (done) {\r\n                    console.log(\"Stream complete\");\r\n                    controller.close();\r\n                    return;\r\n                }\r\n                // Enqueue the next data chunk into our target stream\r\n                controller.enqueue(value);\r\n                return pump();\r\n              });\r\n            }\r\n          }\r\n        })\r\n      })\r\n      .then(stream => new Response(stream))\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        // console.log(\"from get\");\r\n        // console.log(json.data[0]);\r\n        // console.log(json.start);\r\n        // console.log(json.end);\r\n        this.setState({rectangles: json.data, start: json.start, end: json.end});\r\n      })\r\n    } else {\r\n      // post request with user inputted start and end\r\n      const data = new FormData();\r\n      data.append('start', this.state.start);\r\n      data.append('end', this.state.end);\r\n      // get the rectangles from within the time range\r\n      fetch('/return-rectangles', { method: 'POST', body: data }).then(res => res).then(data => {\r\n        var reader = data.body.getReader();\r\n        return new ReadableStream({\r\n          start(controller) {\r\n            return pump();\r\n            function pump() {\r\n              return reader.read().then(({ done, value }) => {\r\n                // When no more data needs to be consumed, close the stream\r\n                if (done) {\r\n                    console.log(\"Stream complete\");\r\n                    controller.close();\r\n                    return;\r\n                }\r\n                // Enqueue the next data chunk into our target stream\r\n                controller.enqueue(value);\r\n                return pump();\r\n              });\r\n            }\r\n          }\r\n        })\r\n      })\r\n      .then(stream => new Response(stream))\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        // console.log(\"from post\");\r\n        // console.log(json.data[0]);\r\n        // console.log(json.start);\r\n        // console.log(json.end);\r\n        this.setState({rectangles: json.data, start: json.start, end: json.end});\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRectangleData();\r\n  }\r\n\r\n  setTime(start, end) {\r\n    const startString = start.format('M/D/YYYY');\r\n    const endString = end.format('M/D/YYYY');\r\n    console.log(startString, endString);\r\n    this.setState({start: startString, end: endString});\r\n    // call rectangles\r\n    this.getRectangleData();\r\n  }\r\n\r\n  handleMapCheckbox(event) {\r\n    const varName = event.target.name;\r\n    const isChecked = event.target.checked;\r\n    console.log(varName, isChecked);\r\n    if (isChecked && !(this.state.mapsToDisplay.includes(varName))) {\r\n      // add variable to mapsToDisplay\r\n      this.state.mapsToDisplay.push(varName);\r\n      this.setState({mapsToDisplay: this.state.mapsToDisplay});\r\n    } else if (!isChecked && (this.state.mapsToDisplay.includes(varName))) {\r\n      // remove variable from mapsToDisplay\r\n      this.setState({mapsToDisplay: this.state.mapsToDisplay.filter(item => item !== varName)});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const RectangleList = ({ data, log, varName }) => {\r\n      return (\r\n        <span>\r\n          {data.map((item, i) => {\r\n            return (\r\n              <div key={i}>\r\n                {log\r\n                  ? <div>\r\n                      <Rectangle key={i} bounds={item.bounds} color={item[\"log_\"+varName+\"_color\"]}>\r\n                        {(varName===\"unmet_demand\")\r\n                          ? <>\r\n                              <Tooltip sticky>\r\n                                Lat: {item.lat}, Long: {item.lng} <br />\r\n                                {(item[\"estimated_demand\"]==null)\r\n                                  ? <>\r\n                                      Prob scooter available not <br /> significantly different than zero\r\n                                    </>\r\n                                  : <>\r\n                                      {this.state.mapTooltipTitles[\"estimated_demand\"]}: {item[\"estimated_demand\"]} <br />\r\n                                      {this.state.mapTooltipTitles[varName]}: {item[varName]}\r\n                                    </>\r\n                                }\r\n                              </Tooltip>\r\n                            </>\r\n                          : <>\r\n                              <Tooltip sticky>\r\n                                Lat: {item.lat}, Long: {item.lng} <br />\r\n                                {this.state.mapTooltipTitles[varName]}: {item[varName]}\r\n                              </Tooltip>\r\n                            </>\r\n                        }\r\n                      </Rectangle>\r\n                    </div>\r\n                  : <div>\r\n                      <Rectangle key={i} bounds={item.bounds} color={item[varName+\"_color\"]}>\r\n                        {(varName===\"unmet_demand\")\r\n                          ? <>\r\n                              <Tooltip sticky>\r\n                                Lat: {item.lat}, Long: {item.lng} <br />\r\n                                {(item[\"estimated_demand\"]==null)\r\n                                  ? <>\r\n                                      Prob scooter available not <br /> significantly different than zero\r\n                                    </>\r\n                                  : <>\r\n                                      {this.state.mapTooltipTitles[\"estimated_demand\"]}: {item[\"estimated_demand\"]} <br />\r\n                                      {this.state.mapTooltipTitles[varName]}: {item[varName]}\r\n                                    </>\r\n                                }\r\n                              </Tooltip>\r\n                            </>\r\n                          : <>\r\n                              <Tooltip sticky>\r\n                                Lat: {item.lat}, Long: {item.lng} <br />\r\n                                {this.state.mapTooltipTitles[varName]}: {item[varName]}\r\n                              </Tooltip>\r\n                            </>\r\n                        }\r\n                      </Rectangle>\r\n                    </div>\r\n                }\r\n              </div>\r\n            );\r\n          })}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    const Maps = ({ data, varNames }) => {\r\n      return (\r\n        <div className=\"DataVisualization\">\r\n          {varNames.map(item => {\r\n            return (\r\n              <>\r\n                <p className=\"DataVisualization-text\">\r\n                  {this.state.mapTitles[item]}\r\n                  <OverlayTrigger trigger={['hover', 'focus']} placement=\"bottom\"\r\n                    overlay={<Popover>\r\n                                <Popover.Title as=\"h1\">Variable Info</Popover.Title>\r\n                                <Popover.Content>\r\n                                  {this.state.mapInfoText[item]}\r\n                                </Popover.Content>\r\n                              </Popover>}>\r\n                    <Button variant=\"link\"><AiOutlineInfoCircle className=\"react-icons\" size=\"1em\" color=\"#5bc0de\"/></Button>\r\n                  </OverlayTrigger>\r\n                </p>\r\n                <MapContainer\r\n                  center={this.state.center}\r\n                  zoom={13}\r\n                  scrollWheelZoom={false}>\r\n                  <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                  />\r\n                  {(item === \"prob_scooter_avail\")\r\n                    ? <LayersControl position=\"topright\">\r\n                        <LayersControl.Overlay checked name=\"Unlogged color scale\">\r\n                          <LayerGroup>\r\n                            <RectangleList data={data} log={false} varName={item} />\r\n                          </LayerGroup>\r\n                        </LayersControl.Overlay>\r\n                      </LayersControl>\r\n                    : <LayersControl position=\"topright\">\r\n                        <LayersControl.Overlay checked name=\"Logged color scale\">\r\n                          <LayerGroup>\r\n                            <RectangleList data={data} log={true} varName={item} />\r\n                          </LayerGroup>\r\n                        </LayersControl.Overlay>\r\n                        <LayersControl.Overlay name=\"Unlogged color scale\">\r\n                          <LayerGroup>\r\n                            <RectangleList data={data} log={false} varName={item} />\r\n                          </LayerGroup>\r\n                        </LayersControl.Overlay>\r\n                      </LayersControl>\r\n                  }\r\n                </MapContainer>\r\n              </>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const checkBoxPopover = (\r\n      <Popover>\r\n        <Popover.Title as=\"h1\">Select variables</Popover.Title>\r\n        <Popover.Content>\r\n          Maps will be generated for the variables you selected. The values\r\n          can be obtained by hovering over the grid cells on the map. All\r\n          variables except for probability scooter available has two layers:\r\n          one colored by log values and one colored by the original values\r\n        </Popover.Content>\r\n      </Popover>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col xs={3} className=\"UserDashboard\">\r\n                {(this.state.end != null) && (this.state.start != null) &&\r\n                  <div>\r\n                    <p>\r\n                      Date Range to Include\r\n                    </p>\r\n                    <DateRangePicker\r\n                      onCallback = {this.setTime.bind(this)}\r\n                      initialSettings={{ startDate: this.state.start, endDate: this.state.end }}\r\n                    >\r\n                      <input type=\"text\" className=\"form-control\" id=\"dateInput\" />\r\n                    </DateRangePicker>\r\n                  </div>\r\n                }\r\n              <br />\r\n              <Form>\r\n                <Form.Group>\r\n                    <p id=\"mapCheckboxText\">\r\n                      Scooter Variable Maps to Display\r\n                      <OverlayTrigger trigger={['hover', 'focus']} placement=\"right\"\r\n                        overlay={checkBoxPopover}>\r\n                        <Button variant=\"link\"><AiOutlineInfoCircle className=\"react-icons\" size=\"1em\" color=\"#5bc0de\"/></Button>\r\n                      </OverlayTrigger>\r\n                    </p>\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      label=\"Average number of scooters\"\r\n                      className=\"mapCheckbox\"\r\n                      name=\"avail_count\"\r\n                      onChange={this.handleMapCheckbox.bind(this)}\r\n                    />\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      label=\"Minutes at least one scooter available\"\r\n                      className=\"mapCheckbox\"\r\n                      name=\"avail_mins\"\r\n                      onChange={this.handleMapCheckbox.bind(this)}\r\n                    />\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      label=\"Number of trips\"\r\n                      className=\"mapCheckbox\"\r\n                      name=\"trips\"\r\n                      onChange={this.handleMapCheckbox.bind(this)}\r\n                    />\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      label=\"Probability scooter available\"\r\n                      className=\"mapCheckbox\"\r\n                      name=\"prob_scooter_avail\"\r\n                      onChange={this.handleMapCheckbox.bind(this)}\r\n                    />\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      label=\"Adjusted number of trips\"\r\n                      className=\"mapCheckbox\"\r\n                      name=\"adj_trips\"\r\n                      onChange={this.handleMapCheckbox.bind(this)}\r\n                    />\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      label=\"Unmet demand\"\r\n                      className=\"mapCheckbox\"\r\n                      name=\"unmet_demand\"\r\n                      onChange={this.handleMapCheckbox.bind(this)}\r\n                    />\r\n                </Form.Group>\r\n              </Form>\r\n              <br />\r\n              <Button onClick={this.downloadData.bind(this)} id=\"downloadButton\">Download Data</Button>\r\n            </Col>\r\n            <Col className=\"MapColumn\">\r\n                {(this.state.mapsToDisplay.length !== 0) &&\r\n                    <Maps data={this.state.rectangles} varNames={this.state.mapsToDisplay} />\r\n                }\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataVisualization;\r\n","// Initiate via yarn start\r\nimport React from 'react';\r\nimport './App.css';\r\nimport Upload from './components/Upload'\r\nimport DataVisualization from './components/DataVisualization'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          {/* If the current URL is /data, this route is rendered\r\n          while the rest are ignored. */}\r\n          <Route path=\"/data\">\r\n            <DataVisualization />\r\n          </Route>\r\n          {/* If none of the previous routes render anything,\r\n          this route acts as a fallback.\r\n\r\n          Important: A route with path=\"/\" will *always* match\r\n          the URL because all URLs begin with a /. So that's\r\n          why we put this one last of all */}\r\n          <Route path=\"/\">\r\n            <div className=\"App\">\r\n              <Upload />\r\n            </div>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport 'bootstrap-daterangepicker/daterangepicker.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}